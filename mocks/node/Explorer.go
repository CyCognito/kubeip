// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/doitintl/kubeip/internal/types"
)

// Explorer is an autogenerated mock type for the Explorer type
type Explorer struct {
	mock.Mock
}

type Explorer_Expecter struct {
	mock *mock.Mock
}

func (_m *Explorer) EXPECT() *Explorer_Expecter {
	return &Explorer_Expecter{mock: &_m.Mock}
}

// GetNode provides a mock function with given fields: ctx, nodeName
func (_m *Explorer) GetNode(ctx context.Context, nodeName string) (*types.Node, error) {
	ret := _m.Called(ctx, nodeName)

	var r0 *types.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Node, error)); ok {
		return rf(ctx, nodeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Node); ok {
		r0 = rf(ctx, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Explorer_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type Explorer_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeName string
func (_e *Explorer_Expecter) GetNode(ctx interface{}, nodeName interface{}) *Explorer_GetNode_Call {
	return &Explorer_GetNode_Call{Call: _e.mock.On("GetNode", ctx, nodeName)}
}

func (_c *Explorer_GetNode_Call) Run(run func(ctx context.Context, nodeName string)) *Explorer_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Explorer_GetNode_Call) Return(_a0 *types.Node, _a1 error) *Explorer_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Explorer_GetNode_Call) RunAndReturn(run func(context.Context, string) (*types.Node, error)) *Explorer_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewExplorer creates a new instance of Explorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExplorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Explorer {
	mock := &Explorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
