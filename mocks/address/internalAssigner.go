// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	compute "google.golang.org/api/compute/v1"

	mock "github.com/stretchr/testify/mock"
)

// InternalAssigner is an autogenerated mock type for the internalAssigner type
type InternalAssigner struct {
	mock.Mock
}

type InternalAssigner_Expecter struct {
	mock *mock.Mock
}

func (_m *InternalAssigner) EXPECT() *InternalAssigner_Expecter {
	return &InternalAssigner_Expecter{mock: &_m.Mock}
}

// AddInstanceAddress provides a mock function with given fields: ctx, instance, zone, _a3
func (_m *InternalAssigner) AddInstanceAddress(ctx context.Context, instance *compute.Instance, zone string, _a3 *compute.Address) error {
	ret := _m.Called(ctx, instance, zone, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.Instance, string, *compute.Address) error); ok {
		r0 = rf(ctx, instance, zone, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InternalAssigner_AddInstanceAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInstanceAddress'
type InternalAssigner_AddInstanceAddress_Call struct {
	*mock.Call
}

// AddInstanceAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - instance *compute.Instance
//   - zone string
//   - _a3 *compute.Address
func (_e *InternalAssigner_Expecter) AddInstanceAddress(ctx interface{}, instance interface{}, zone interface{}, _a3 interface{}) *InternalAssigner_AddInstanceAddress_Call {
	return &InternalAssigner_AddInstanceAddress_Call{Call: _e.mock.On("AddInstanceAddress", ctx, instance, zone, _a3)}
}

func (_c *InternalAssigner_AddInstanceAddress_Call) Run(run func(ctx context.Context, instance *compute.Instance, zone string, _a3 *compute.Address)) *InternalAssigner_AddInstanceAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.Instance), args[2].(string), args[3].(*compute.Address))
	})
	return _c
}

func (_c *InternalAssigner_AddInstanceAddress_Call) Return(_a0 error) *InternalAssigner_AddInstanceAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InternalAssigner_AddInstanceAddress_Call) RunAndReturn(run func(context.Context, *compute.Instance, string, *compute.Address) error) *InternalAssigner_AddInstanceAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAddressAssigned provides a mock function with given fields: region, addressName
func (_m *InternalAssigner) CheckAddressAssigned(region string, addressName string) (bool, error) {
	ret := _m.Called(region, addressName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(region, addressName)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(region, addressName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(region, addressName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InternalAssigner_CheckAddressAssigned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAddressAssigned'
type InternalAssigner_CheckAddressAssigned_Call struct {
	*mock.Call
}

// CheckAddressAssigned is a helper method to define mock.On call
//   - region string
//   - addressName string
func (_e *InternalAssigner_Expecter) CheckAddressAssigned(region interface{}, addressName interface{}) *InternalAssigner_CheckAddressAssigned_Call {
	return &InternalAssigner_CheckAddressAssigned_Call{Call: _e.mock.On("CheckAddressAssigned", region, addressName)}
}

func (_c *InternalAssigner_CheckAddressAssigned_Call) Run(run func(region string, addressName string)) *InternalAssigner_CheckAddressAssigned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *InternalAssigner_CheckAddressAssigned_Call) Return(_a0 bool, _a1 error) *InternalAssigner_CheckAddressAssigned_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InternalAssigner_CheckAddressAssigned_Call) RunAndReturn(run func(string, string) (bool, error)) *InternalAssigner_CheckAddressAssigned_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstanceAddress provides a mock function with given fields: ctx, instance, zone
func (_m *InternalAssigner) DeleteInstanceAddress(ctx context.Context, instance *compute.Instance, zone string) error {
	ret := _m.Called(ctx, instance, zone)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.Instance, string) error); ok {
		r0 = rf(ctx, instance, zone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InternalAssigner_DeleteInstanceAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstanceAddress'
type InternalAssigner_DeleteInstanceAddress_Call struct {
	*mock.Call
}

// DeleteInstanceAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - instance *compute.Instance
//   - zone string
func (_e *InternalAssigner_Expecter) DeleteInstanceAddress(ctx interface{}, instance interface{}, zone interface{}) *InternalAssigner_DeleteInstanceAddress_Call {
	return &InternalAssigner_DeleteInstanceAddress_Call{Call: _e.mock.On("DeleteInstanceAddress", ctx, instance, zone)}
}

func (_c *InternalAssigner_DeleteInstanceAddress_Call) Run(run func(ctx context.Context, instance *compute.Instance, zone string)) *InternalAssigner_DeleteInstanceAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.Instance), args[2].(string))
	})
	return _c
}

func (_c *InternalAssigner_DeleteInstanceAddress_Call) Return(_a0 error) *InternalAssigner_DeleteInstanceAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InternalAssigner_DeleteInstanceAddress_Call) RunAndReturn(run func(context.Context, *compute.Instance, string) error) *InternalAssigner_DeleteInstanceAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewInternalAssigner creates a new instance of InternalAssigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInternalAssigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *InternalAssigner {
	mock := &InternalAssigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
