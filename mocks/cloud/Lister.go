// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	cloud "github.com/doitintl/kubeip/internal/cloud"
	mock "github.com/stretchr/testify/mock"
)

// Lister is an autogenerated mock type for the Lister type
type Lister struct {
	mock.Mock
}

type Lister_Expecter struct {
	mock *mock.Mock
}

func (_m *Lister) EXPECT() *Lister_Expecter {
	return &Lister_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: projectID, region
func (_m *Lister) List(projectID string, region string) cloud.ListCall {
	ret := _m.Called(projectID, region)

	var r0 cloud.ListCall
	if rf, ok := ret.Get(0).(func(string, string) cloud.ListCall); ok {
		r0 = rf(projectID, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.ListCall)
		}
	}

	return r0
}

// Lister_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Lister_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - projectID string
//   - region string
func (_e *Lister_Expecter) List(projectID interface{}, region interface{}) *Lister_List_Call {
	return &Lister_List_Call{Call: _e.mock.On("List", projectID, region)}
}

func (_c *Lister_List_Call) Run(run func(projectID string, region string)) *Lister_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Lister_List_Call) Return(_a0 cloud.ListCall) *Lister_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Lister_List_Call) RunAndReturn(run func(string, string) cloud.ListCall) *Lister_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewLister creates a new instance of Lister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *Lister {
	mock := &Lister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
