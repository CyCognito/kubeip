// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	mock "github.com/stretchr/testify/mock"
)

// EipLister is an autogenerated mock type for the EipLister type
type EipLister struct {
	mock.Mock
}

type EipLister_Expecter struct {
	mock *mock.Mock
}

func (_m *EipLister) EXPECT() *EipLister_Expecter {
	return &EipLister_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, filter, inUse
func (_m *EipLister) List(ctx context.Context, filter map[string][]string, inUse bool) ([]types.Address, error) {
	ret := _m.Called(ctx, filter, inUse)

	var r0 []types.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]string, bool) ([]types.Address, error)); ok {
		return rf(ctx, filter, inUse)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]string, bool) []types.Address); ok {
		r0 = rf(ctx, filter, inUse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string][]string, bool) error); ok {
		r1 = rf(ctx, filter, inUse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EipLister_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type EipLister_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string][]string
//   - inUse bool
func (_e *EipLister_Expecter) List(ctx interface{}, filter interface{}, inUse interface{}) *EipLister_List_Call {
	return &EipLister_List_Call{Call: _e.mock.On("List", ctx, filter, inUse)}
}

func (_c *EipLister_List_Call) Run(run func(ctx context.Context, filter map[string][]string, inUse bool)) *EipLister_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]string), args[2].(bool))
	})
	return _c
}

func (_c *EipLister_List_Call) Return(_a0 []types.Address, _a1 error) *EipLister_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EipLister_List_Call) RunAndReturn(run func(context.Context, map[string][]string, bool) ([]types.Address, error)) *EipLister_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewEipLister creates a new instance of EipLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEipLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *EipLister {
	mock := &EipLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
