// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	cloud "github.com/doitintl/kubeip/internal/cloud"
	mock "github.com/stretchr/testify/mock"
)

// ZoneWaiter is an autogenerated mock type for the ZoneWaiter type
type ZoneWaiter struct {
	mock.Mock
}

type ZoneWaiter_Expecter struct {
	mock *mock.Mock
}

func (_m *ZoneWaiter) EXPECT() *ZoneWaiter_Expecter {
	return &ZoneWaiter_Expecter{mock: &_m.Mock}
}

// Wait provides a mock function with given fields: projectID, region, operationName
func (_m *ZoneWaiter) Wait(projectID string, region string, operationName string) cloud.WaitCall {
	ret := _m.Called(projectID, region, operationName)

	var r0 cloud.WaitCall
	if rf, ok := ret.Get(0).(func(string, string, string) cloud.WaitCall); ok {
		r0 = rf(projectID, region, operationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.WaitCall)
		}
	}

	return r0
}

// ZoneWaiter_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type ZoneWaiter_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - projectID string
//   - region string
//   - operationName string
func (_e *ZoneWaiter_Expecter) Wait(projectID interface{}, region interface{}, operationName interface{}) *ZoneWaiter_Wait_Call {
	return &ZoneWaiter_Wait_Call{Call: _e.mock.On("Wait", projectID, region, operationName)}
}

func (_c *ZoneWaiter_Wait_Call) Run(run func(projectID string, region string, operationName string)) *ZoneWaiter_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ZoneWaiter_Wait_Call) Return(_a0 cloud.WaitCall) *ZoneWaiter_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZoneWaiter_Wait_Call) RunAndReturn(run func(string, string, string) cloud.WaitCall) *ZoneWaiter_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewZoneWaiter creates a new instance of ZoneWaiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewZoneWaiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ZoneWaiter {
	mock := &ZoneWaiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
