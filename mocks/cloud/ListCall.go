// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	cloud "github.com/doitintl/kubeip/internal/cloud"
	compute "google.golang.org/api/compute/v1"

	mock "github.com/stretchr/testify/mock"
)

// ListCall is an autogenerated mock type for the ListCall type
type ListCall struct {
	mock.Mock
}

type ListCall_Expecter struct {
	mock *mock.Mock
}

func (_m *ListCall) EXPECT() *ListCall_Expecter {
	return &ListCall_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields:
func (_m *ListCall) Do() (*compute.AddressList, error) {
	ret := _m.Called()

	var r0 *compute.AddressList
	var r1 error
	if rf, ok := ret.Get(0).(func() (*compute.AddressList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *compute.AddressList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.AddressList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCall_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type ListCall_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
func (_e *ListCall_Expecter) Do() *ListCall_Do_Call {
	return &ListCall_Do_Call{Call: _e.mock.On("Do")}
}

func (_c *ListCall_Do_Call) Run(run func()) *ListCall_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ListCall_Do_Call) Return(_a0 *compute.AddressList, _a1 error) *ListCall_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListCall_Do_Call) RunAndReturn(run func() (*compute.AddressList, error)) *ListCall_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function with given fields: filter
func (_m *ListCall) Filter(filter string) cloud.ListCall {
	ret := _m.Called(filter)

	var r0 cloud.ListCall
	if rf, ok := ret.Get(0).(func(string) cloud.ListCall); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.ListCall)
		}
	}

	return r0
}

// ListCall_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type ListCall_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - filter string
func (_e *ListCall_Expecter) Filter(filter interface{}) *ListCall_Filter_Call {
	return &ListCall_Filter_Call{Call: _e.mock.On("Filter", filter)}
}

func (_c *ListCall_Filter_Call) Run(run func(filter string)) *ListCall_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListCall_Filter_Call) Return(_a0 cloud.ListCall) *ListCall_Filter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListCall_Filter_Call) RunAndReturn(run func(string) cloud.ListCall) *ListCall_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// OrderBy provides a mock function with given fields: orderBy
func (_m *ListCall) OrderBy(orderBy string) cloud.ListCall {
	ret := _m.Called(orderBy)

	var r0 cloud.ListCall
	if rf, ok := ret.Get(0).(func(string) cloud.ListCall); ok {
		r0 = rf(orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.ListCall)
		}
	}

	return r0
}

// ListCall_OrderBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderBy'
type ListCall_OrderBy_Call struct {
	*mock.Call
}

// OrderBy is a helper method to define mock.On call
//   - orderBy string
func (_e *ListCall_Expecter) OrderBy(orderBy interface{}) *ListCall_OrderBy_Call {
	return &ListCall_OrderBy_Call{Call: _e.mock.On("OrderBy", orderBy)}
}

func (_c *ListCall_OrderBy_Call) Run(run func(orderBy string)) *ListCall_OrderBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListCall_OrderBy_Call) Return(_a0 cloud.ListCall) *ListCall_OrderBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListCall_OrderBy_Call) RunAndReturn(run func(string) cloud.ListCall) *ListCall_OrderBy_Call {
	_c.Call.Return(run)
	return _c
}

// PageToken provides a mock function with given fields: pageToken
func (_m *ListCall) PageToken(pageToken string) cloud.ListCall {
	ret := _m.Called(pageToken)

	var r0 cloud.ListCall
	if rf, ok := ret.Get(0).(func(string) cloud.ListCall); ok {
		r0 = rf(pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.ListCall)
		}
	}

	return r0
}

// ListCall_PageToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PageToken'
type ListCall_PageToken_Call struct {
	*mock.Call
}

// PageToken is a helper method to define mock.On call
//   - pageToken string
func (_e *ListCall_Expecter) PageToken(pageToken interface{}) *ListCall_PageToken_Call {
	return &ListCall_PageToken_Call{Call: _e.mock.On("PageToken", pageToken)}
}

func (_c *ListCall_PageToken_Call) Run(run func(pageToken string)) *ListCall_PageToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListCall_PageToken_Call) Return(_a0 cloud.ListCall) *ListCall_PageToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListCall_PageToken_Call) RunAndReturn(run func(string) cloud.ListCall) *ListCall_PageToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewListCall creates a new instance of ListCall. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListCall(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListCall {
	mock := &ListCall{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
